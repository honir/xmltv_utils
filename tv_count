#!/usr/bin/perl -w
#
###############################################################################
#  Count (and print) the number of channels and programmes in an XMLTV file
###############################################################################
#
# Copyright G. Westcott - February 2013
#
# This code is distributed under the GNU General Public License v2 (GPLv2) .
#
# 

my $_version 	= '$Id: tv_count,v 1.002 2013/04/16 11:55:00 honir Exp $';

use strict;
use XML::TreePP;		# http://search.cpan.org/~kawasaki/XML-TreePP-0.41/lib/XML/TreePP.pm
use Date::Parse;
use POSIX qw(strftime);
use Getopt::Std;
use Data::Dumper;

# Process command line arguments
my %opts = ();              			# hash to store input args
getopts("dDhi:o:m:q",\%opts); 		# load the args into %opts
my $input_file     = ($opts{'i'}) ? $opts{'i'} : $ARGV[0];     # main file
my $debug          = ($opts{'d'}) ? $opts{'d'} : "";    # print out debugging when set to true (1) 
my $debugmore      = ($opts{'D'}) ? $opts{'D'} : "";    # print out debugging when set to true (1) 
my $quiet_mode     = ($opts{'q'}) ? $opts{'q'} : "";

if ((!%opts && ! -r $ARGV[0]) || $opts{'h'}) {
    # Print usage message
    usage();
}

# Parse the XMLTV file
my $tpp = XML::TreePP->new();
$tpp->set( force_array => [ 'channel', 'programme' ] );  # force array ref for some fields

			
my $xmltv = $tpp->parsefile( $input_file );
if ($debugmore) {  print Dumper($xmltv); }


my $ccount = scalar @{ $xmltv->{'tv'}->{'channel'} };
my $pcount = scalar @{ $xmltv->{'tv'}->{'programme'} };
if (!$quiet_mode) { print "Count : $ccount channels $pcount programmes \n"; }
		
		

###############################################################################
###############################################################################
		

sub usage {
    #
    # print Usage message
    #
    my $filename = (split(/\//,$0))[-1];
		print STDERR << "EOF";

Count (and print) the number of channels and programmes in an XMLTV file

Usage: $filename [-dDh] -i input_xmltv_file

-h        : this (help) message
-d        : print debugging messages 
-D        : print even more debugging messages 
-q        : quiet mode (no STDOUT messages)
-i file   : input XMLTV file (or filename as first arg to script)

example: $filename -i xmltv.xml
	
EOF
exit;
}